{"version":3,"sources":["node_modules/browser-pack/_prelude.js","resources/assets/typescript/cookie.ts","resources/assets/typescript/mybb.ts","resources/assets/typescript/spinner.ts"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","Cookie","prefix","path","domain","secure","this","prototype","get","name","encodeURIComponent","replace","decodeURIComponent","value","document","cookie","parts","split","pop","shift","set","expires","cookieEntry","trim","expiresString","Date","toUTCString","expiresDate","setMilliseconds","getMilliseconds","unset","__esModule","cookie_1","spinner_1","spinner","Spinner","spinnerText","assertSpinnerElementExists","el","getElementById","createElement","id","iconNode","className","textNode","createTextNode","appendChild","body","insertBefore","firstChild","add","numInProgress","spinnerElement","style","display","remove"],"mappings":"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","file":"mybb.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","export default class Cookie {\n    /**\n     * Create a new instance of the cookie container.\n     *\n     * @param prefix The prefix to apply to all cookies.\n     * @param path The path that all cookies should be assigned to.\n     * @param domain The domain that all cookies should be assigned to.\n     * @param secure Whether cookies should be set as secure (HTTPS).\n     */\n    constructor(protected prefix: string = \"\",\n                protected path: string = \"/\",\n                protected domain: string = \"\",\n                protected secure: boolean = false) {\n        // TODO: Ensure the path is absolute, relative paths are not supported!\n    }\n\n    /**\n     * Get the value of the cookie with the given name.\n     *\n     * @param name The name of the cookie to retrieve.\n     *\n     * @return The value of the cookie, or null if it doesn't exist.\n     */\n    get(name: string): string {\n        name = encodeURIComponent(this.prefix + name);\n        name = name.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent);\n\n        let value = \"; \" + document.cookie;\n        let parts = value.split(\"; \" + name + \"=\");\n        if (parts.length == 2) {\n            return parts.pop().split(\";\").shift();\n        }\n\n        return null;\n    }\n\n    /**\n     * Set a new cookie.\n     * @param name The name of the cookie to set.\n     * @param value The value of the cookie to set.\n     * @param expires Either a date to expire the cookie at, or a number of days for the cookie to last (default: 5 years).\n     */\n    set(name: string, value: string, expires: number | Date = 157680000): void {\n        name = encodeURIComponent(this.prefix + name);\n        name = name.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent);\n\n        var cookieEntry = name.trim() + \"=\" + encodeURIComponent(value);\n\n        if (this.path.length > 0) {\n            cookieEntry += \"; path=\" + this.path;\n        }\n\n        if (this.domain.length > 0) {\n            cookieEntry += \"; domain=\" + this.domain;\n        }\n\n        if (this.secure) {\n            cookieEntry += \"; secure\";\n        }\n\n        if (expires !== null) {\n            var expiresString: string;\n\n            if (expires instanceof Date) {\n                expiresString = expires.toUTCString();\n            } else {\n                // expires is a number\n                let expiresDate = new Date();\n                expiresDate.setMilliseconds(expiresDate.getMilliseconds() + (expires * 864e+5));\n                expiresString = expiresDate.toUTCString();\n            }\n\n            cookieEntry += \"; expires=\" + expiresString;\n        }\n\n        document.cookie = cookieEntry;\n    }\n\n    /**\n     * Remove the given cookie.\n     *\n     * @param name The name of the cookie to remove.\n     */\n    unset(name: string): void {\n        this.set(name, \"\", -1);\n    }\n}\n","import Cookie from \"./cookie\";\nimport Spinner from \"./spinner\";\n\nvar mybb = {\n    cookie: new Cookie(),\n    spinner: new Spinner(),\n};\n","export default class Spinner {\n    protected static numInProgress: number = 0;\n\n    constructor(protected spinnerText: string = \"Loading...\") {}\n\n    private assertSpinnerElementExists(): HTMLElement {\n        var el = document.getElementById(\"spinner\");\n\n        if (el !== null) {\n            return el;\n        }\n\n        // TODO: Should we create the default spinner?\n        el = document.createElement(\"div\");\n        el.id = \"spinner\";\n\n        let iconNode = document.createElement(\"i\");\n        iconNode.className = \"fa fa-spinner fa-pulse\";\n\n        let textNode = document.createTextNode(this.spinnerText);\n\n        el.appendChild(iconNode);\n        el.appendChild(textNode);\n\n        document.body.insertBefore(el, document.body.firstChild);\n\n        return el;\n    }\n\n    public add() {\n        if (Spinner.numInProgress++ === 1) {\n            let spinnerElement = this.assertSpinnerElementExists();\n\n            spinnerElement.style.display = \"block\";\n        }\n    }\n\n    public remove() {\n        if (Spinner.numInProgress-- === 0) {\n            let spinnerElement = this.assertSpinnerElementExists();\n\n            spinnerElement.style.display = \"none\";\n        }\n    }\n}\n"],"sourceRoot":"/source/"}